#!/usr/bin/env ruby

# Load the Rubyku library, de-referencing the symlink if needed.
$LOAD_PATH.unshift(File.expand_path("../../lib", 
  if File.symlink? __FILE__
    File.readlink __FILE__
  else
    __FILE__
  end
))
require "rubyku"

class App < Thor

  include Term::ANSIColor

  desc "init SERVER_HOSTNAME",
    "Initialize the target server for Rubyku deployment"
  def init(server_hostname)
    Rubyku::SystemInitializer.new(server_hostname, options).run
  end

  desc "add SERVER_HOSTNAME",
    "Add the local Ruby project to the remote host"
  method_option :env,
    type: :hash,
    desc: "A list of environment variables to add to this app",
    default: {}
  method_option :yes,
    type: :boolean,
    desc: "Skip confirmation and prompting of details",
    default: false
  def add(server_hostname)
    # Prompt for the missing details
    log "Please enter some details about this app"
    app_hostname = ask("What's the hostname to use for this app?", default: server_hostname)
    local_path   = ask("What's the local path to the app?", default: Dir.pwd)
    remote_name  = ask("What name to use for this remote server on the local repository?", default: "production")
    app_name     = ask("What name to use for this app on the server?", default: File.basename(local_path))

    # Confirm the input values
    puts
    puts(Terminal::Table.new do |t|
      row = -> key, value {
        t << [ yellow(key.to_s), green(value.to_s) ]
      }

      row["Server Hostname", server_hostname]
      row["App Hostname", app_hostname]
      row["Local Repository Path", local_path]
      row["Local Repository Remote Name", remote_name]
      row["Remote App Name", app_name]
    end.to_s)
    puts
    exit unless options[:yes] || yes?("Do you want to proceed with these values?")

    # Run the app initializer
    Rubyku::ProjectInitializer.new(server_hostname, {
      :app_hostname => app_hostname,
      :local_path   => local_path,
      :remote_name  => remote_name,
      :app_name     => app_name,
      :env          => options[:env] || {},
    }).run
  end

  private

  def log(message)
    puts
    puts "#{ yellow '---->' } #{ green message.to_s }"
    puts
  end

end

App.start
